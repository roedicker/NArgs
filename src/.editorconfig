# EditorConfig is awesome:http://EditorConfig.org
# Taken from Roslyn compiler project https://github.com/dotnet/roslyn/blob/master/.editorconfig
# Additional sources: https://gist.github.com/jmarolf/0e165b27a498b49e3b3512004ea9d8b8
# and https://github.com/dotnet/corefx/blob/master/.editorconfig
# Note: Naming conventions should be ordered from most-specific to least-specific.
#       The first rule encountered that can be applied is the only rule that is applied.
#       See https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-naming-conventions


# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# .Net code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Use new file scoped namespace usage 
csharp_style_namespace_declarations=file_scoped:suggestion

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

#STG coding standard: Interface prefix "I"
dotnet_naming_rule.interface_prefix_I.symbols  = interface_symbols
dotnet_naming_rule.interface_prefix_I.style    = interface_prefix_style
dotnet_naming_rule.interface_prefix_I.severity = error
dotnet_naming_symbols.interface_symbols.applicable_kinds           = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = public, internal, friend
dotnet_naming_style.interface_prefix_style.required_prefix = I
dotnet_naming_style.interface_prefix_style.capitalization = pascal_case

# MSDN recommendation: asynchronous methods suffix "Async"
dotnet_naming_rule.async_method_suffix.symbols  = async_method_symbols
dotnet_naming_rule.async_method_suffix.style    = async_method_suffix_style
dotnet_naming_rule.async_method_suffix.severity = error
dotnet_naming_symbols.async_method_symbols.applicable_kinds           = method
dotnet_naming_symbols.async_method_symbols.required_modifiers         = async
dotnet_naming_symbols.async_method_symbols.applicable_accessibilities = public, internal, friend
dotnet_naming_style.async_method_suffix_style.required_suffix = Async
dotnet_naming_style.async_method_suffix_style.capitalization = pascal_case

# STG coding standard: PascalCase
dotnet_naming_rule.public_members_must_be_pascal_case.symbols  = public_symbols
dotnet_naming_rule.public_members_must_be_pascal_case.style    = public_members_style
dotnet_naming_rule.public_members_must_be_pascal_case.severity = error
dotnet_naming_symbols.public_symbols.applicable_kinds           = class,struct,enum,property,method,field,event,delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public, internal, friend
dotnet_naming_style.public_members_style.capitalization = pascal_case

# STG coding standard: Underscore prefix for private fields
dotnet_naming_rule.private_fields_must_be_prefixed_with_underscore.symbols  = field_symbols
dotnet_naming_rule.private_fields_must_be_prefixed_with_underscore.style    = private_field_style
dotnet_naming_rule.private_fields_must_be_prefixed_with_underscore.severity = warning
dotnet_naming_symbols.field_symbols.applicable_kinds           = field
dotnet_naming_symbols.field_symbols.applicable_accessibilities = private
dotnet_naming_style.private_field_style.required_prefix = _
dotnet_naming_style.private_field_style.capitalization = camel_case

# CSharp code style settings:
[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_space_between_method_call_empty_parameter_list_parentheses  = false
csharp_space_between_method_call_parameter_list_parentheses = false

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
